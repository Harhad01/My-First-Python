<<<<<<< HEAD



# Dictionary & Data Structure Practice
# Concepts: Dictionary manipulation, nesting, list-dict combinations, algorithm design

# Project 1: Student Grading System - Conditional dictionary population
# Project 2: Travel Log - Nested dictionaries and list storage  
# Project 3: Secret Auction - Real-time data collection and algorithm processing 






# student_scores= {
#     "Harry": 81,
#     "Ron": 78,
#     "Hermione": 99,
#     "Draco": 74,
#     "Neville": 62,
# }

# student_grades = {}
# for student in student_scores:
#     score = student_scores[student]
#     if score > 90:
#         student_grades[student] = "Outstanding"
#     else:
#         if score > 80:
#             student_grades[student] = "Exceeds Expectations"
#         else:
#             if score > 70:
#                 student_grades[student] = "Acceptable"
#             else:
#                 student_grades[student] = "Fail"
                
# print(student_grades)
 
#Nesting
# capitals = {
#     "France": "Paris",
#     "Germany": "Berlin",
# }

# travel_log = {
#     "France": {"cities_visited": ["Paris", "Lille", "Dijon"]},
#     "Germany": {"cities_visited": ["Berlin", "Hamburg", "Stuttgart"]},



# travel_log = {
#     "Country": "France",
#     "visits" : 12,
#     "cities" : ["Paris", "Lille", "Dijon"]
# },
# {
#     "Country": "Germany",
#     "visits" : 5,
#     "cities" : ["Berlin", "Hamburg", "Stuttgart"]
# }
# def add_new_country(country_visited, times_visited, cities_visited):
#     new_country = {}
#     new_country["Country"] = country_visited
#     new_country["visits"] = times_visited
#     new_country["cities"] = cities_visited
#     travel_log.append(new_country)
    
# add_new_country ("Russia", 2, ["Moscow", "Saint Petersburg"])
# print(travel_log)
bids = {}
biding_finished = False

def find_highest_bidder(bidding_record):
    highest_bid = 0
    for bidder in bidding_record:
        bid_amount = bidding_record[bidder]
        if bid_amount > highest_bid:
            highest_bid = bid_amount
            winner = bidder 
    print(f"The winner is {winner} with a bid of ${highest_bid}")

while not biding_finished:
    name = input("What is your name?: ")
    price = int(input("What is your bid?: $"))
    bids[name] = price
    should_continue =input("Are there any other bidders? Type 'yes' or 'no'.\n").lower()
    if should_continue == "no":
=======



# Dictionary & Data Structure Practice
# Concepts: Dictionary manipulation, nesting, list-dict combinations, algorithm design

# Project 1: Student Grading System - Conditional dictionary population
# Project 2: Travel Log - Nested dictionaries and list storage  
# Project 3: Secret Auction - Real-time data collection and algorithm processing 






# student_scores= {
#     "Harry": 81,
#     "Ron": 78,
#     "Hermione": 99,
#     "Draco": 74,
#     "Neville": 62,
# }

# student_grades = {}
# for student in student_scores:
#     score = student_scores[student]
#     if score > 90:
#         student_grades[student] = "Outstanding"
#     else:
#         if score > 80:
#             student_grades[student] = "Exceeds Expectations"
#         else:
#             if score > 70:
#                 student_grades[student] = "Acceptable"
#             else:
#                 student_grades[student] = "Fail"
                
# print(student_grades)
 
#Nesting
# capitals = {
#     "France": "Paris",
#     "Germany": "Berlin",
# }

# travel_log = {
#     "France": {"cities_visited": ["Paris", "Lille", "Dijon"]},
#     "Germany": {"cities_visited": ["Berlin", "Hamburg", "Stuttgart"]},



# travel_log = {
#     "Country": "France",
#     "visits" : 12,
#     "cities" : ["Paris", "Lille", "Dijon"]
# },
# {
#     "Country": "Germany",
#     "visits" : 5,
#     "cities" : ["Berlin", "Hamburg", "Stuttgart"]
# }
# def add_new_country(country_visited, times_visited, cities_visited):
#     new_country = {}
#     new_country["Country"] = country_visited
#     new_country["visits"] = times_visited
#     new_country["cities"] = cities_visited
#     travel_log.append(new_country)
    
# add_new_country ("Russia", 2, ["Moscow", "Saint Petersburg"])
# print(travel_log)
bids = {}
biding_finished = False

def find_highest_bidder(bidding_record):
    highest_bid = 0
    for bidder in bidding_record:
        bid_amount = bidding_record[bidder]
        if bid_amount > highest_bid:
            highest_bid = bid_amount
            winner = bidder 
    print(f"The winner is {winner} with a bid of ${highest_bid}")

while not biding_finished:
    name = input("What is your name?: ")
    price = int(input("What is your bid?: $"))
    bids[name] = price
    should_continue =input("Are there any other bidders? Type 'yes' or 'no'.\n").lower()
    if should_continue == "no":
>>>>>>> 97e8131 (Save local work before sync)
        bidding_finished = True